AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  csi-api_sam

  GlobalWorx 
  CSI RESTful API
# Global definitions for resources
Globals:
  Function:
    Timeout: 3
    Tags:
      ENV: Test
      PROJECT: CSI_API
Parameters:
  ConfigTableParam:
    Type: String
    Default: csi_db_configs
  ProfilesTableParam:
    Type: String
    Default: csi_auth_profiles
# AWS Resources
Resources:
  # -- API Gateway --
  CsiRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: apitest.goglobalworx.com
        CertificateArn: arn:aws:acm:us-east-1:080747705781:certificate/8bee1793-93f6-4839-a49d-9cc2b0604fcc
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z1UJRXOUMOOFQ8
      StageName: Test
      Cors:
        AllowMethods: "'POST, PUT, GET'"
        AllowHeaders: "'X-Forwarded-For, Authorization, Content-Type, Access-Token'"
        AllowOrigin: "*"
        MaxAge: "'600'"
        AllowCredentials: True
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
                - Access-Token
              ReauthorizeEvery: 120 # seconds
      Models:
        APIResponse:
          type: object
          required: [ success, type ]
          properties : 
            type : 
              type : string
            success : 
              type : boolean
            data : 
              type : object
              properties : {}                
            error : 
              type : string
  # -- Lambda --
  AuthorizerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: gwx-api_authorizer
      CodeUri: lambdas/
      Handler: authorizer.handler
      Runtime: python3.8
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem,
                - dynamodb:Describe*,
                - dynamodb:List*,
                - dynamodb:GetItem,
                - dynamodb:Query,
                - dynamodb:Scan,
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Ref ProfilesTable
      Environment:
        Variables:
          PROFILES_TABLE: !Ref ProfilesTableParam  
  WorxProxyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: gwx-http_proxy
      CodeUri: lambdas/
      Handler: worxproxy.handler
      Runtime: python3.8
      Events:
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref CsiRestApi
            Path: /api/csi/*
            Method: put
            RequestParameters:
              - method.request.header.Authorization
              - method.request.header.Access-Token

  CSIReportFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: gwxc-csi_report
      CodeUri: lambdas/
      Handler: csireport.handler
      Runtime: python3.8
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem,
                - dynamodb:Describe*,
                - dynamodb:List*,
                - dynamodb:GetItem,
                - dynamodb:Query,
                - dynamodb:Scan,
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Ref ConfigsTable      
      Environment:
        Variables:
          CONFIGS_TABLE: !Ref ConfigTableParam


      Layers:
        - arn:aws:lambda:us-east-1:898466741470:layer:psycopg2-py38:1
        - Ref: AppDBLayer
      Events:
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref CsiRestApi
            Path: /api/csi
            Method: get
            RequestParameters:
              - method.request.header.Authorization
              - method.request.header.Access-Token
  # -- Layers --
  # PsycoPGLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     CompatibleRuntimes: 
  #     - python3.8
  #     ContentUri: arn:aws:lambda:us-east-1:898466741470:layer:psycopg2-py37:3
  #     Description: Python DBI Driver for PostgreSQL
  #     LayerName: cl_syn-layer_psycopg2
  AppDBLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes: 
      - python3.8
      ContentUri: layers/
      Description: Python modules for GWX DB work
      LayerName: cl_syn-layer_gwxdb
  # -- DynamoDB --
  ConfigsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: 
        Name: app_id
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref ConfigTableParam
    Tags:
      ENV: Test
      PROJECT: CSI_API
  ProfilesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: 
        Name: api_key
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref ProfilesTableParam
    Tags:
      ENV: Test
      PROJECT: CSI_API
Outputs:
  TestDataEndpoint:
    Description: "API Test stage endpoint"
    Value: !Sub "https://${CsiRestApi}.execute-api.${AWS::Region}.amazonaws.com/Test/"